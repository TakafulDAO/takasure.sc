//SPDX-License-Identifier: GPL-3.0

/**
 * @title RevenueShareModule
 * @author Maikel Ordaz
 * @dev Allow NFT holders to receive a share of the revenue generated by the platform
 * @dev Upgradeable contract with UUPS pattern
 */
import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import {IAddressManager} from "contracts/interfaces/IAddressManager.sol";

import {UUPSUpgradeable, Initializable} from "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";
import {TLDModuleImplementation} from "contracts/modules/moduleUtils/TLDModuleImplementation.sol";

import {ModuleState} from "contracts/types/TakasureTypes.sol";
import {ModuleErrors} from "contracts/helpers/libraries/errors/ModuleErrors.sol";
import {Roles} from "contracts/helpers/libraries/constants/Roles.sol";
import {AddressAndStates} from "contracts/helpers/libraries/checks/AddressAndStates.sol";

import {SafeERC20} from "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";

pragma solidity 0.8.28;

contract RevenueShareModule is TLDModuleImplementation, Initializable, UUPSUpgradeable {
    using SafeERC20 for IERC20;

    uint256 public revenuesAvailableDate;

    mapping(address pioneer => uint256 revenue) public revenuePerPioneer;
    /*//////////////////////////////////////////////////////////////
                           EVENTS AND ERRORS
    //////////////////////////////////////////////////////////////*/

    event OnRevenueShareClaimed(address indexed pioneer, uint256 amount);

    error RevenueShareModule__RevenuesNotAvailableYet();

    /*//////////////////////////////////////////////////////////////
                               MODIFIERS
    //////////////////////////////////////////////////////////////*/

    modifier onlyContract(string memory name) {
        require(
            AddressAndStates._checkName(address(addressManager), name),
            ModuleErrors.Module__NotAuthorizedCaller()
        );
        _;
    }

    modifier onlyRole(bytes32 role) {
        require(
            AddressAndStates._checkRole(address(addressManager), role),
            ModuleErrors.Module__NotAuthorizedCaller()
        );
        _;
    }

    /*//////////////////////////////////////////////////////////////
                             INITIALIZATION
    //////////////////////////////////////////////////////////////*/

    /// @custom:oz-upgrades-unsafe-allow constructor
    constructor() {
        _disableInitializers();
    }

    function initialize(address _addressManagerAddress) external initializer {
        AddressAndStates._notZeroAddress(_addressManagerAddress);
        __UUPSUpgradeable_init();

        addressManager = IAddressManager(_addressManagerAddress);
    }

    /*//////////////////////////////////////////////////////////////
                                SETTERS
    //////////////////////////////////////////////////////////////*/

    /**
     * @notice Set the module state
     * @dev Only callable from the Module Manager
     */
    function setContractState(
        ModuleState newState
    ) external override onlyContract("MODULE_MANAGER") {
        moduleState = newState;
    }

    /*//////////////////////////////////////////////////////////////
                                 CLAIMS
    //////////////////////////////////////////////////////////////*/

    function claimRevenueShare() external returns (uint256 revenue) {
        require(
            block.timestamp >= revenuesAvailableDate,
            RevenueShareModule__RevenuesNotAvailableYet()
        );

        _updateRevenue(msg.sender);

        revenue = revenuePerPioneer[msg.sender];

        if (revenue > 0) {
            revenuePerPioneer[msg.sender] = 0;

            IERC20 contributionToken = IERC20(
                addressManager.getProtocolAddressByName("CONTRIBUTION_TOKEN").addr
            );
            contributionToken.safeTransfer(msg.sender, revenue);

            emit OnRevenueShareClaimed(msg.sender, revenue);
        }
    }

    function updateRevenue(address pioneer) external {
        _updateRevenue(pioneer);
    }

    /*//////////////////////////////////////////////////////////////
                        INTERNAL FUNCTIONS
    //////////////////////////////////////////////////////////////*/

    function _updateRevenue(address _pioneer) internal {}

    ///@dev required by the OZ UUPS module
    function _authorizeUpgrade(
        address newImplementation
    ) internal override onlyRole(Roles.OPERATOR) {}
}
