@startuml Subscription_with_benefits_prorate
title Subscription with benefits â€” prorate
autonumber

actor Backend
actor Parent
actor User
participant SubscriptionModule
participant MembersData
participant KYCModule
participant CouponPool
participant RewardsModule
participant LifeBenefitModule
participant Reserve

Backend -> SubscriptionModule: paySubscriptionOnBehalfOf(memberWallet, parentWallet, contribution)

break [Caller-NOT-valid]
  SubscriptionModule -x Backend: revert InvalidCaller()
end

break [Module-disabled]
  SubscriptionModule -x Backend: revert ModuleDisabled()
end

break [Contribution-IS-NOT-minimum-(25-USDC)]
  SubscriptionModule -x Backend: revert WrongContribution()
end

SubscriptionModule -> MembersData: getAssociationMemberData(memberWallet)
MembersData --> SubscriptionModule: Member data

break [Member-invalid]
  SubscriptionModule -x Backend: revert InvalidMember()
end

opt [Parent-wallet-not-zero]
  SubscriptionModule -> MembersData: getAssociationMemberData(parentWallet)
  MembersData --> SubscriptionModule: Parent data

  break [Parent-invalid]
    SubscriptionModule -x Backend: revert InvalidParent()
  end

  SubscriptionModule -> RewardsModule: assignParentReward(for the minimum contribution)
end

SubscriptionModule -> MembersData: registerAssociationMember(memberWallet, parentWallet, contribution)
MembersData -> MembersData: Emits event
MembersData --> SubscriptionModule: success

CouponPool -> SubscriptionModule: transfer minimum contribution

SubscriptionModule -> KYCModule: approveKYC(memberWallet)
KYCModule -> KYCModule: Emits event

opt [30d-passed-(cronjob)]
  SubscriptionModule -> Reserve: transfer minimum contribution
  Reserve -> Reserve: Run algorithms (Do not include member)

  opt [there-was-a-parent]
    SubscriptionModule -> RewardsModule: rewardParent
    RewardsModule -> RewardsModule: Emits event
    RewardsModule --> Parent: transfer parent reward
  end
end

opt [>30d-passed]
  User -> Backend: asks for benefit
  Backend -> LifeBenefitModule: joinBenefit(memberWallet)
  LifeBenefitModule -> MembersData: getAssociationMemberData(memberWallet)
  MembersData --> LifeBenefitModule: Member data
  LifeBenefitModule -> LifeBenefitModule: Calculate prorated contribution

  opt [there-was-a-parent]
    LifeBenefitModule -> RewardsModule: assignParentReward(for the prorated contribution)
    LifeBenefitModule -> RewardsModule: rewardParent
    RewardsModule -> RewardsModule: Emits event
    RewardsModule --> Parent: transfer parent reward
  end

  LifeBenefitModule -> MembersData: updateMember(memberWallet)
  CouponPool -> Reserve: transfer prorated contribution to Reserve
  Reserve -> Reserve: Run algorithms (include member)
end

@enduml
