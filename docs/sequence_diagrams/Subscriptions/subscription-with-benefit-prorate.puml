@startuml Subscription_with_benefits_prorate
title Subscription with benefits â€” prorate
autonumber

!include subscription-common.puml

actor Backend
actor Parent
actor Member
participant SubscriptionModule
participant MembersData
participant KYCModule
participant CouponPool
participant RewardsModule
participant LifeBenefitModule
participant Reserve

Member -> Backend: requests subscription
Backend -> SubscriptionModule: paySubscriptionOnBehalfOf(memberWallet, parentWallet, contribution)

PRECHECKS_CONTRIB_MIN25_NOTMIN()

ref over Backend, SubscriptionModule, MembersData, KYCModule, CouponPool, RewardsModule [[refund.puml]] : Refund flow

opt [there-was-a-parent]
  SubscriptionModule -> RewardsModule: assignParentReward(for the minimum contribution)
end

REGISTER_AND_CONFIRM()

CouponPool -> SubscriptionModule: transfer minimum contribution
KYC_MANDATORY()

opt [30d-passed-(cronjob)]
  SubscriptionModule -> Reserve: transfer minimum contribution
  Reserve -> Reserve: Run algorithms (Do not include member)

  opt [there-was-a-parent]
    SubscriptionModule -> RewardsModule: rewardParent
    RewardsModule -> RewardsModule: Emits event
    RewardsModule --> Parent: transfer parent reward
  end
end

opt [>30d-passed]
  Member -> Backend: requests benefit
  Backend -> LifeBenefitModule: joinBenefit(memberWallet)
  LifeBenefitModule -> MembersData: getAssociationMemberData(memberWallet)
  MembersData --> LifeBenefitModule: Member data
  LifeBenefitModule -> LifeBenefitModule: Calculate prorated contribution

  opt [there-was-a-parent]
    LifeBenefitModule -> RewardsModule: assignParentReward(for the prorated contribution)
    LifeBenefitModule -> RewardsModule: rewardParent
    RewardsModule -> RewardsModule: Emits event
    RewardsModule --> Parent: transfer parent reward
  end

  LifeBenefitModule -> MembersData: updateMember(memberWallet)
  CouponPool -> Reserve: transfer prorated contribution to Reserve
  Reserve -> Reserve: Run algorithms (include member)
end

@enduml
