@startuml Subscription_with_benefits_no_prorate
title Subscription with benefits â€” no prorate
autonumber

actor Backend
actor Parent
participant SubscriptionModule
participant MembersData
participant CouponPool
participant RewardsModule
participant KYCModule
participant LifeBenefitModule
participant Reserve

Backend -> SubscriptionModule: paySubscriptionOnBehalfOf(memberWallet, parentWallet, contribution)

break [Caller-NOT-valid]
  SubscriptionModule -x Backend: revert InvalidCaller()
end

break [Module-disabled]
  SubscriptionModule -x Backend: revert ModuleDisabled()
end

break [Contribution-out-of-limits-(<25-or->250-USDC)]
  SubscriptionModule -x Backend: revert WrongContribution()
end

SubscriptionModule -> MembersData: getAssociationMemberData(memberWallet)
MembersData --> SubscriptionModule: Member data

break [Member-invalid]
  SubscriptionModule -x Backend: revert InvalidMember()
end

opt [Parent-wallet-not-zero]
  SubscriptionModule -> MembersData: getAssociationMemberData(parentWallet)
  MembersData --> SubscriptionModule: Parent data

  break [Parent-invalid]
    SubscriptionModule -x Backend: revert InvalidParent()
  end

  SubscriptionModule -> RewardsModule: assignParentReward(for the minimum contribution)
end

SubscriptionModule -> MembersData: registerAssociationMember(memberWallet, parentWallet, contribution)
MembersData -> MembersData: Emits event
MembersData --> SubscriptionModule: success

CouponPool -> SubscriptionModule: transfer minimum contribution
SubscriptionModule -> KYCModule: approveKYC(memberWallet)
KYCModule -> KYCModule: Emits event

Backend -> LifeBenefitModule: joinBenefit(memberWallet)
LifeBenefitModule -> MembersData: updateMember(memberWallet)

SubscriptionModule -> Reserve: transfer minimum contribution to Reserve

opt [there-was-a-parent]
  SubscriptionModule -> RewardsModule: rewardParent
  RewardsModule -> RewardsModule: Emits event
  RewardsModule --> Parent: transfer parent reward
end

CouponPool -> Reserve: transfer remaining contribution to Reserve

opt [there-was-a-parent]
  LifeBenefitModule -> RewardsModule: assignParentReward(for the remaining contribution)
  LifeBenefitModule -> RewardsModule: rewardParent
  RewardsModule -> RewardsModule: Emits event
  RewardsModule --> Parent: transfer parent reward
end

Reserve -> Reserve: Run algorithms (include member)

@enduml
