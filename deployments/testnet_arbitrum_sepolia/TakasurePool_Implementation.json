{
  "address": "0xb144e4008f754c4cc36dbc8dc0Ac31df66725B44",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TakasurePool__ContributionBelowMinimumThreshold",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TakasurePool__ContributionTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TakasurePool__FeeTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TakasurePool__InvalidMember",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TakasurePool__MemberAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TakasurePool__MemberAlreadyKYCed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TakasurePool__MintFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TakasurePool__WrongWakalaFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TakasurePool__ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongTimestamps",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "contributionAmount",
          "type": "uint256"
        }
      ],
      "name": "OnMemberJoined",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "OnMemberKycVerified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowCustomDuration",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCashLast12Months",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "cash_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContributionTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "contributionToken_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "getMemberFromAddress",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "memberId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "benefitMultiplier",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "membershipDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "membershipStartTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "contribution",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalWakalaFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "wallet",
              "type": "address"
            },
            {
              "internalType": "enum MemberState",
              "name": "memberState",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "surplus",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isKYCVerified",
              "type": "bool"
            }
          ],
          "internalType": "struct Member",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "memberId",
          "type": "uint256"
        }
      ],
      "name": "getMemberFromId",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "memberId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "benefitMultiplier",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "membershipDuration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "membershipStartTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "contribution",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalWakalaFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "wallet",
              "type": "address"
            },
            {
              "internalType": "enum MemberState",
              "name": "memberState",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "surplus",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isKYCVerified",
              "type": "bool"
            }
          ],
          "internalType": "struct Member",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "getMemberKYCStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isKYCVerified_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReserveValues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "initialReserveRatio_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dynamicReserveRatio_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "benefitMultiplierAdjuster_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalContributions_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalClaimReserve_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalFundReserve_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "proFormaFundReserve_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "proFormaClaimReserve_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lossRatio_",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "wakalaFee_",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "bmaFundReserveShare_",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "isOptimizerEnabled_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contributionToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_daoToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wakalaClaimAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_daoOperator",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "benefitMultiplier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "contributionAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "membershipDuration",
          "type": "uint256"
        }
      ],
      "name": "joinPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "memberIdCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_allowCustomDuration",
          "type": "bool"
        }
      ],
      "name": "setAllowCustomDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "member",
          "type": "address"
        }
      ],
      "name": "setKYCStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newContributionToken",
          "type": "address"
        }
      ],
      "name": "setNewContributionToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newMinimumThreshold",
          "type": "uint256"
        }
      ],
      "name": "setNewMinimumThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newWakalaClaimAddress",
          "type": "address"
        }
      ],
      "name": "setNewWakalaClaimAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "newWakalaFee",
          "type": "uint8"
        }
      ],
      "name": "setNewWakalaFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wakalaClaimAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xabdc168a97cb60c051a8858c32a7b4e26d64ab290d5af0e9c52a1fee9b67d5e8",
  "receipt": {
    "to": null,
    "from": "0x3904F59DF9199e0d6dC3800af9f6794c9D037eb1",
    "contractAddress": "0xb144e4008f754c4cc36dbc8dc0Ac31df66725B44",
    "transactionIndex": 1,
    "gasUsed": "7880773",
    "logsBloom": "0x
    "blockHash": "0xcb7a8394c84ed6609aed066eccd50723e1dcc5d05728affa05e793438fa6f822",
    "transactionHash": "0xabdc168a97cb60c051a8858c32a7b4e26d64ab290d5af0e9c52a1fee9b67d5e8",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 59770248,
        "transactionHash": "0xabdc168a97cb60c051a8858c32a7b4e26d64ab290d5af0e9c52a1fee9b67d5e8",
        "address": "0xb144e4008f754c4cc36dbc8dc0Ac31df66725B44",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 0,
        "blockHash": "0xcb7a8394c84ed6609aed066eccd50723e1dcc5d05728affa05e793438fa6f822"
      }
    ],
    "blockNumber": 59770248,
    "cumulativeGasUsed": "7880773",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "444b60ccc86d536ec571b7fed5bb2988",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TakasurePool__ContributionBelowMinimumThreshold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TakasurePool__ContributionTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TakasurePool__FeeTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TakasurePool__InvalidMember\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TakasurePool__MemberAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TakasurePool__MemberAlreadyKYCed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TakasurePool__MintFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TakasurePool__WrongWakalaFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TakasurePool__ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongTimestamps\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"contributionAmount\",\"type\":\"uint256\"}],\"name\":\"OnMemberJoined\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"OnMemberKycVerified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowCustomDuration\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCashLast12Months\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cash_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContributionTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contributionToken_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"getMemberFromAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"memberId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"benefitMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"membershipDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"membershipStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWakalaFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"enum MemberState\",\"name\":\"memberState\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"surplus\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isKYCVerified\",\"type\":\"bool\"}],\"internalType\":\"struct Member\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"memberId\",\"type\":\"uint256\"}],\"name\":\"getMemberFromId\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"memberId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"benefitMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"membershipDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"membershipStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWakalaFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"enum MemberState\",\"name\":\"memberState\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"surplus\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isKYCVerified\",\"type\":\"bool\"}],\"internalType\":\"struct Member\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"getMemberKYCStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isKYCVerified_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserveValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"initialReserveRatio_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dynamicReserveRatio_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"benefitMultiplierAdjuster_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalContributions_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimReserve_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFundReserve_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proFormaFundReserve_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proFormaClaimReserve_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lossRatio_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"wakalaFee_\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"bmaFundReserveShare_\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isOptimizerEnabled_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contributionToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_daoToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wakalaClaimAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_daoOperator\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"benefitMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contributionAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"membershipDuration\",\"type\":\"uint256\"}],\"name\":\"joinPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"memberIdCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allowCustomDuration\",\"type\":\"bool\"}],\"name\":\"setAllowCustomDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"setKYCStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newContributionToken\",\"type\":\"address\"}],\"name\":\"setNewContributionToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinimumThreshold\",\"type\":\"uint256\"}],\"name\":\"setNewMinimumThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWakalaClaimAddress\",\"type\":\"address\"}],\"name\":\"setNewWakalaClaimAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newWakalaFee\",\"type\":\"uint8\"}],\"name\":\"setNewWakalaFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wakalaClaimAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getCashLast12Months()\":{\"returns\":{\"cash_\":\"the cash flow for the last 12 months\"}},\"initialize(address,address,address,address)\":{\"details\":\"it reverts if any of the addresses is zero\",\"params\":{\"_contributionToken\":\"default USDC\",\"_daoOperator\":\"address allowed to manage the DAO\",\"_daoToken\":\"utility token for the DAO\",\"_wakalaClaimAddress\":\"address allowed to claim the wakala fee\"}},\"joinPool(uint256,uint256,uint256)\":{\"details\":\"it reverts if the contribution is less than the minimum threshold defaultes to `minimumThreshold`it reverts if the member is already activethe contribution amount will be round down so the last four decimals will be zero. This means      that the minimum contribution amount is 0.01 USDC\",\"params\":{\"benefitMultiplier\":\"fetched from off-chain oracle\",\"contributionAmount\":\"in six decimals\",\"membershipDuration\":\"default 5 years\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setKYCStatus(address)\":{\"details\":\"It reverts if the member is already KYCed\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getCashLast12Months()\":{\"notice\":\"Get the cash flow for the last 12 months. From the time is called\"},\"joinPool(uint256,uint256,uint256)\":{\"notice\":\"Allow new members to join the pool\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/takasure/TakasurePool.sol\":\"TakasurePool\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"contracts/interfaces/ITSToken.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.25;\\r\\n\\r\\ninterface ITSToken {\\r\\n    /// @notice Mint Takasure powered tokens\\r\\n    /// @param to The address to mint tokens to\\r\\n    /// @param amountToMint The amount of tokens to mint\\r\\n    function mint(address to, uint256 amountToMint) external returns (bool);\\r\\n\\r\\n    /// @notice Burn Takasure powered tokens\\r\\n    /// @param amountToBurn The amount of tokens to burn\\r\\n    function burn(uint256 amountToBurn) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xb4cf7b882d3ce12cbf46d82b46b085ce9bd7cec287c9111839e1abe75322ba31\",\"license\":\"GPL-3.0\"},\"contracts/libraries/ReserveMathLib.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/**\\r\\n * @title ReserveMathLib\\r\\n * @author Maikel Ordaz\\r\\n * @notice It includes the math functions to calculate reserve ratios and benefit multipliers\\r\\n */\\r\\n\\r\\npragma solidity 0.8.25;\\r\\n\\r\\nlibrary ReserveMathLib {\\r\\n    error WrongTimestamps();\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                               PRO FORMA\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    /**\\r\\n     * @notice The Fund Reserve based on each member\\u2019s fund reserve add, But taking out / removing\\r\\n     *         any members that had claims or for any other reason aren't active anymore\\r\\n     * @dev This value will lately be used to update the dynamic reserve ratio\\r\\n     * @param _currentProFormaFundReserve Current value. Note: Six decimals\\r\\n     * @param _memberContribution Net contribution of the member. Note: Six decimals\\r\\n     * @param _currentDynamicReserveRatio Current dynamic reserve ratio. Note: Percentage value,\\r\\n     *                                    i.e. 40% => input should be 40\\r\\n     * @return updatedProFormaFundReserve_ Updated value. Note: Six decimals\\r\\n     */\\r\\n    function _updateProFormaFundReserve(\\r\\n        uint256 _currentProFormaFundReserve,\\r\\n        uint256 _memberContribution,\\r\\n        uint256 _currentDynamicReserveRatio\\r\\n    ) internal pure returns (uint256 updatedProFormaFundReserve_) {\\r\\n        updatedProFormaFundReserve_ =\\r\\n            _currentProFormaFundReserve +\\r\\n            ((_memberContribution * _currentDynamicReserveRatio) / 100);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate the pro forma claim reserve, which should be updated on every cash-in operation\\r\\n     * @param _currentProFormaClaimReserve Current value. Note: Six decimals\\r\\n     * @param _memberContribution Net contribution of the member. Note: Six decimals\\r\\n     * @param _wakalaFee Wakala fee. Note: Percentage value, i.e. 20% => input should be 20\\r\\n     * @param _initialReserveRatio Initial reserve ratio. Note: Percentage value, i.e. 40% => input should be 40\\r\\n     * @return updatedProFormaClaimReserve_ Updated value. Note: Six decimals\\r\\n     */\\r\\n    function _updateProFormaClaimReserve(\\r\\n        uint256 _currentProFormaClaimReserve,\\r\\n        uint256 _memberContribution,\\r\\n        uint8 _wakalaFee,\\r\\n        uint256 _initialReserveRatio\\r\\n    ) internal pure returns (uint256 updatedProFormaClaimReserve_) {\\r\\n        // updatedProFormaClaimReserve = currentProFormaClaimReserve + (memberContribution * (1 - wakalaFee) * (1 - initialReserveRatio))\\r\\n        // To avoid rounding issues as (1 - wakalaFee) * (1 - initialReserveRatio) is always 1, in solidity. We use the percentage values and divide by 10^4\\r\\n        updatedProFormaClaimReserve_ =\\r\\n            _currentProFormaClaimReserve +\\r\\n            ((_memberContribution * (100 - uint256(_wakalaFee)) * (100 - _initialReserveRatio)) /\\r\\n                10 ** 4);\\r\\n    }\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                                  DRR\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate the dynamic reserve ratio on every cash-in operation\\r\\n     * @param _currentDynamicReserveRatio Current value. Note: Percentage value, i.e. 40% => input should be 40\\r\\n     * @param _proFormaFundReserve Pro forma fund reserve. Note: Six decimals\\r\\n     * @param _fundReserve Fund reserve. Note: Six decimals\\r\\n     * @param _cashFlowLastPeriod Cash flow of the last period of 12 months. Note: Six decimals\\r\\n     * @return updatedDynamicReserveRatio_ Updated value. Note: Percentage value, i.e. 40% => return value will be 40\\r\\n     * @dev The dynamic reserve ratio is calculated based on the current pro forma fund reserve\\r\\n     */\\r\\n    function _calculateDynamicReserveRatioReserveShortfallMethod(\\r\\n        uint256 _currentDynamicReserveRatio,\\r\\n        uint256 _proFormaFundReserve,\\r\\n        uint256 _fundReserve,\\r\\n        uint256 _cashFlowLastPeriod\\r\\n    ) internal pure returns (uint256 updatedDynamicReserveRatio_) {\\r\\n        int256 fundReserveShortfall = int256(_proFormaFundReserve) - int256(_fundReserve);\\r\\n\\r\\n        if (fundReserveShortfall > 0 && _cashFlowLastPeriod > 0) {\\r\\n            uint256 possibleDRR = _currentDynamicReserveRatio +\\r\\n                ((uint256(fundReserveShortfall) * 100) / _cashFlowLastPeriod);\\r\\n\\r\\n            if (possibleDRR < 100) {\\r\\n                updatedDynamicReserveRatio_ = possibleDRR;\\r\\n            } else {\\r\\n                updatedDynamicReserveRatio_ = 100;\\r\\n            }\\r\\n        } else {\\r\\n            updatedDynamicReserveRatio_ = _currentDynamicReserveRatio;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                                  BMA\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    /**\\r\\n     * @notice Helper function to calculate the benefit multiplier adjuster\\r\\n     * @param _cashFlowLastPeriod Cash flow of the last period of 12 months. Note: Six decimals\\r\\n     * @param _wakalaFee Wakala fee. Note: Percentage value, i.e. 20% => input should be 20\\r\\n     * @param _initialDRR Initial dynamic reserve ratio. Note: Percentage value, i.e. 40% => input should be 40\\r\\n     * @return bmaInflowAssumption_ Six decimals\\r\\n     */\\r\\n    // todo: this one can be inlined inside _calculateBmaCashFlowMethod, as it is only used there. It depends if we decide to use another bma method and it is used in other places\\r\\n    function _calculateBmaInflowAssumption(\\r\\n        uint256 _cashFlowLastPeriod,\\r\\n        uint256 _wakalaFee,\\r\\n        uint256 _initialDRR\\r\\n    ) internal pure returns (uint256 bmaInflowAssumption_) {\\r\\n        bmaInflowAssumption_ =\\r\\n            (_cashFlowLastPeriod * (100 - _wakalaFee) * (100 - _initialDRR)) /\\r\\n            10 ** 4;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate the benefit multiplier adjuster through the Cash Flow Method\\r\\n     * @param _totalClaimReserves Total claim reserves. Note: Six decimals\\r\\n     * @param _totalFundReserves Total fund reserves. Note: Six decimals\\r\\n     * @param _bmaFundReserveShares Percentage value, i.e. 70% => input should be 70\\r\\n     * @param _proFormaClaimReserve Pro forma claim reserve. Note: Six decimals\\r\\n     * @param _bmaInflowAssumption Six decimals\\r\\n     * @return bma_ Percentage value, i.e. 100% => return value will be 100\\r\\n     */\\r\\n    function _calculateBmaCashFlowMethod(\\r\\n        uint256 _totalClaimReserves,\\r\\n        uint256 _totalFundReserves,\\r\\n        uint256 _bmaFundReserveShares,\\r\\n        uint256 _proFormaClaimReserve,\\r\\n        uint256 _bmaInflowAssumption\\r\\n    ) internal pure returns (uint256 bma_) {\\r\\n        // Calculate BMA numerator\\r\\n        uint256 bmaNumerator = _totalClaimReserves +\\r\\n            _bmaInflowAssumption +\\r\\n            ((_totalFundReserves * _bmaFundReserveShares) / 100);\\r\\n\\r\\n        // Calculate BMA denominator\\r\\n        uint256 bmaDenominator = (2 * _proFormaClaimReserve) +\\r\\n            ((_totalFundReserves * _bmaFundReserveShares) / 100);\\r\\n\\r\\n        if (bmaDenominator == 0) {\\r\\n            bma_ = 100;\\r\\n        } else {\\r\\n            uint256 possibleBMA = (bmaNumerator * 100) / bmaDenominator;\\r\\n\\r\\n            if (possibleBMA > 100) {\\r\\n                bma_ = 100;\\r\\n            } else {\\r\\n                bma_ = possibleBMA;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                                 DATES\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate date difference in days\\r\\n     * @param _finalDayTimestamp Final timestamp\\r\\n     * @param _initialDayTimestamp Initial timestamp\\r\\n     * @return daysPassed_ Days passed\\r\\n     */\\r\\n    function _calculateDaysPassed(\\r\\n        uint256 _finalDayTimestamp,\\r\\n        uint256 _initialDayTimestamp\\r\\n    ) internal pure returns (uint256 daysPassed_) {\\r\\n        if (_finalDayTimestamp < _initialDayTimestamp) {\\r\\n            revert WrongTimestamps();\\r\\n        } else {\\r\\n            uint256 dayTimePassed = _finalDayTimestamp - _initialDayTimestamp;\\r\\n            if (dayTimePassed < 1 days) {\\r\\n                daysPassed_ = 0;\\r\\n            } else {\\r\\n                daysPassed_ = dayTimePassed / 1 days;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate date difference in months\\r\\n     * @param _finalMonthTimestamp Final timestamp\\r\\n     * @param _initialMonthTimestamp Initial timestamp\\r\\n     * @return monthsPassed_ Months passed\\r\\n     */\\r\\n    function _calculateMonthsPassed(\\r\\n        uint256 _finalMonthTimestamp,\\r\\n        uint256 _initialMonthTimestamp\\r\\n    ) internal pure returns (uint256 monthsPassed_) {\\r\\n        if (_finalMonthTimestamp < _initialMonthTimestamp) {\\r\\n            revert WrongTimestamps();\\r\\n        } else {\\r\\n            uint256 monthTimePassed = _finalMonthTimestamp - _initialMonthTimestamp;\\r\\n            uint256 month = 30 days;\\r\\n            if (monthTimePassed < month) {\\r\\n                monthsPassed_ = 0;\\r\\n            } else {\\r\\n                monthsPassed_ = monthTimePassed / month;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8b5a2bbba5683d12c366709a7eacee4f1883fd687749e2a07ee074c3436d5fbd\",\"license\":\"GPL-3.0\"},\"contracts/takasure/TakasurePool.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\n/**\\r\\n * @title TakasurePool\\r\\n * @author Maikel Ordaz\\r\\n * @dev Users communicate with this module to become members of the DAO. It contains member management\\r\\n *      functionality such as modifying or canceling the policy, updates BM and BMA, remove non active\\r\\n *      members, calculate surplus\\r\\n * @dev Upgradeable contract with UUPS pattern\\r\\n */\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {ITSToken} from \\\"../interfaces/ITSToken.sol\\\";\\r\\n\\r\\nimport {UUPSUpgradeable, Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\n\\r\\nimport {Reserve, Member, MemberState} from \\\"../types/TakasureTypes.sol\\\";\\r\\nimport {ReserveMathLib} from \\\"../libraries/ReserveMathLib.sol\\\";\\r\\n\\r\\npragma solidity 0.8.25;\\r\\n\\r\\n// todo: change OwnableUpgradeable to AccessControlUpgradeable\\r\\ncontract TakasurePool is Initializable, UUPSUpgradeable, OwnableUpgradeable {\\r\\n    IERC20 private contributionToken;\\r\\n    ITSToken private daoToken;\\r\\n\\r\\n    Reserve private reserve;\\r\\n\\r\\n    uint256 private constant DECIMALS_PRECISION = 1e12;\\r\\n    uint256 private constant DECIMAL_REQUIREMENT_PRECISION_USDC = 1e4; // 4 decimals to receive at minimum 0.01 USDC\\r\\n    uint256 private constant DEFAULT_MEMBERSHIP_DURATION = 5 * (365 days); // 5 year\\r\\n    uint256 private constant MONTH = 30 days; // Todo: manage a better way for 365 days and leap years maybe?\\r\\n    uint256 private constant DAY = 1 days;\\r\\n\\r\\n    bool public allowCustomDuration; // while false, the membership duration is fixed to 5 years\\r\\n\\r\\n    uint256 private dayDepositTimestamp; // 0 at begining, then never is zero again\\r\\n    uint256 private monthDepositTimestamp; // 0 at begining, then never is zero again\\r\\n    uint16 private monthReference; // Will count the month. For gas issues will grow undefinitely\\r\\n    uint8 private dayReference; // Will count the day of the month from 1 -> 30, then resets to 1\\r\\n\\r\\n    uint256 public minimumThreshold;\\r\\n    uint256 public memberIdCounter;\\r\\n    address public wakalaClaimAddress;\\r\\n\\r\\n    mapping(uint256 memberIdCounter => Member) private idToMember;\\r\\n\\r\\n    mapping(uint16 month => uint256 montCashFlow) private monthToCashFlow;\\r\\n    mapping(uint16 month => mapping(uint8 day => uint256 dayCashFlow)) private dayToCashFlow; // ? Maybe better block.timestamp => dailyDeposits for this one?\\r\\n\\r\\n    event OnMemberJoined(address indexed member, uint256 indexed contributionAmount);\\r\\n    event OnMemberKycVerified(address indexed member);\\r\\n\\r\\n    error TakasurePool__MemberAlreadyExists();\\r\\n    error TakasurePool__ZeroAddress();\\r\\n    error TakasurePool__ContributionBelowMinimumThreshold();\\r\\n    error TakasurePool__ContributionTransferFailed();\\r\\n    error TakasurePool__FeeTransferFailed();\\r\\n    error TakasurePool__MintFailed();\\r\\n    error TakasurePool__WrongWakalaFee();\\r\\n    error TakasurePool__InvalidMember();\\r\\n    error TakasurePool__MemberAlreadyKYCed();\\r\\n\\r\\n    modifier notZeroAddress(address _address) {\\r\\n        if (_address == address(0)) {\\r\\n            revert TakasurePool__ZeroAddress();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    constructor() {\\r\\n        _disableInitializers();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param _contributionToken default USDC\\r\\n     * @param _daoToken utility token for the DAO\\r\\n     * @param _wakalaClaimAddress address allowed to claim the wakala fee\\r\\n     * @param _daoOperator address allowed to manage the DAO\\r\\n     * @dev it reverts if any of the addresses is zero\\r\\n     */\\r\\n    function initialize(\\r\\n        address _contributionToken,\\r\\n        address _daoToken,\\r\\n        address _wakalaClaimAddress,\\r\\n        address _daoOperator\\r\\n    )\\r\\n        external\\r\\n        initializer\\r\\n        notZeroAddress(_contributionToken)\\r\\n        notZeroAddress(_daoToken)\\r\\n        notZeroAddress(_wakalaClaimAddress)\\r\\n        notZeroAddress(_daoOperator)\\r\\n    {\\r\\n        __UUPSUpgradeable_init();\\r\\n        __Ownable_init(_daoOperator);\\r\\n\\r\\n        contributionToken = IERC20(_contributionToken);\\r\\n        daoToken = ITSToken(_daoToken);\\r\\n        wakalaClaimAddress = _wakalaClaimAddress;\\r\\n\\r\\n        monthReference = 1;\\r\\n        dayReference = 1;\\r\\n        minimumThreshold = 25e6; // 25 USDC // 6 decimals\\r\\n\\r\\n        reserve.initialReserveRatio = 40; // 40% Default\\r\\n        reserve.dynamicReserveRatio = reserve.initialReserveRatio; // Default\\r\\n        reserve.benefitMultiplierAdjuster = 100; // 100% Default\\r\\n        reserve.wakalaFee = 20; // 20% of the contribution amount. Default\\r\\n        reserve.bmaFundReserveShare = 70; // 70% Default\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allow new members to join the pool\\r\\n     * @param benefitMultiplier fetched from off-chain oracle\\r\\n     * @param contributionAmount in six decimals\\r\\n     * @param membershipDuration default 5 years\\r\\n     * @dev it reverts if the contribution is less than the minimum threshold defaultes to `minimumThreshold`\\r\\n     * @dev it reverts if the member is already active\\r\\n     * @dev the contribution amount will be round down so the last four decimals will be zero. This means\\r\\n     *      that the minimum contribution amount is 0.01 USDC\\r\\n     */\\r\\n    function joinPool(\\r\\n        uint256 benefitMultiplier,\\r\\n        uint256 contributionAmount,\\r\\n        uint256 membershipDuration\\r\\n    ) external {\\r\\n        // Todo: Check the user benefit multiplier against the oracle.\\r\\n        if (reserve.members[msg.sender].memberState == MemberState.Active) {\\r\\n            revert TakasurePool__MemberAlreadyExists();\\r\\n        }\\r\\n        if (contributionAmount < minimumThreshold) {\\r\\n            revert TakasurePool__ContributionBelowMinimumThreshold();\\r\\n        }\\r\\n\\r\\n        // Todo: re-calculate DAO Surplus.\\r\\n\\r\\n        // Setting variables used in different scope blocks\\r\\n        // The minimum we can receive is 0,01 USDC, here we round it. This to prevent rounding errors\\r\\n        // i.e. contributionAmount = (25.123456 / 1e4) * 1e4 = 25.12USDC\\r\\n        contributionAmount =\\r\\n            (contributionAmount / DECIMAL_REQUIREMENT_PRECISION_USDC) *\\r\\n            DECIMAL_REQUIREMENT_PRECISION_USDC;\\r\\n        uint256 wakalaAmount = (contributionAmount * reserve.wakalaFee) / 100;\\r\\n        uint256 depositAmount = contributionAmount - wakalaAmount;\\r\\n\\r\\n        _createNewMember(benefitMultiplier, contributionAmount, membershipDuration, wakalaAmount);\\r\\n        _updateProFormas(contributionAmount);\\r\\n        _updateReserves(contributionAmount, depositAmount);\\r\\n        _updateCashMappings(depositAmount);\\r\\n        uint256 cashLast12Months = _cashLast12Months(monthReference, dayReference);\\r\\n        _updateDRR(cashLast12Months);\\r\\n        _updateBMA(cashLast12Months);\\r\\n        _transferAmounts(contributionAmount, depositAmount, wakalaAmount);\\r\\n\\r\\n        emit OnMemberJoined(msg.sender, contributionAmount);\\r\\n    }\\r\\n\\r\\n    function setNewWakalaFee(uint8 newWakalaFee) external onlyOwner {\\r\\n        if (newWakalaFee > 100) {\\r\\n            revert TakasurePool__WrongWakalaFee();\\r\\n        }\\r\\n        reserve.wakalaFee = newWakalaFee;\\r\\n    }\\r\\n\\r\\n    function setNewMinimumThreshold(uint256 newMinimumThreshold) external onlyOwner {\\r\\n        minimumThreshold = newMinimumThreshold;\\r\\n    }\\r\\n\\r\\n    function setNewContributionToken(\\r\\n        address newContributionToken\\r\\n    ) external onlyOwner notZeroAddress(newContributionToken) {\\r\\n        contributionToken = IERC20(newContributionToken);\\r\\n    }\\r\\n\\r\\n    function setNewWakalaClaimAddress(\\r\\n        address newWakalaClaimAddress\\r\\n    ) external onlyOwner notZeroAddress(newWakalaClaimAddress) {\\r\\n        wakalaClaimAddress = newWakalaClaimAddress;\\r\\n    }\\r\\n\\r\\n    function setAllowCustomDuration(bool _allowCustomDuration) external onlyOwner {\\r\\n        allowCustomDuration = _allowCustomDuration;\\r\\n    }\\r\\n\\r\\n    /// @dev It reverts if the member is already KYCed\\r\\n    function setKYCStatus(address member) external onlyOwner {\\r\\n        if (member == address(0) || reserve.members[member].memberState != MemberState.Active) {\\r\\n            revert TakasurePool__InvalidMember();\\r\\n        }\\r\\n        if (reserve.members[member].isKYCVerified) {\\r\\n            revert TakasurePool__MemberAlreadyKYCed();\\r\\n        }\\r\\n\\r\\n        reserve.members[member].isKYCVerified = true;\\r\\n\\r\\n        emit OnMemberKycVerified(member);\\r\\n    }\\r\\n\\r\\n    function getReserveValues()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint256 initialReserveRatio_,\\r\\n            uint256 dynamicReserveRatio_,\\r\\n            uint256 benefitMultiplierAdjuster_,\\r\\n            uint256 totalContributions_,\\r\\n            uint256 totalClaimReserve_,\\r\\n            uint256 totalFundReserve_,\\r\\n            uint256 proFormaFundReserve_,\\r\\n            uint256 proFormaClaimReserve_,\\r\\n            uint256 lossRatio_,\\r\\n            uint8 wakalaFee_,\\r\\n            uint8 bmaFundReserveShare_,\\r\\n            bool isOptimizerEnabled_\\r\\n        )\\r\\n    {\\r\\n        initialReserveRatio_ = reserve.initialReserveRatio;\\r\\n        dynamicReserveRatio_ = reserve.dynamicReserveRatio;\\r\\n        benefitMultiplierAdjuster_ = reserve.benefitMultiplierAdjuster;\\r\\n        totalContributions_ = reserve.totalContributions;\\r\\n        totalClaimReserve_ = reserve.totalClaimReserve;\\r\\n        totalFundReserve_ = reserve.totalFundReserve;\\r\\n        proFormaFundReserve_ = reserve.proFormaFundReserve;\\r\\n        proFormaClaimReserve_ = reserve.proFormaClaimReserve;\\r\\n        lossRatio_ = reserve.lossRatio;\\r\\n        wakalaFee_ = reserve.wakalaFee;\\r\\n        bmaFundReserveShare_ = reserve.bmaFundReserveShare;\\r\\n        isOptimizerEnabled_ = reserve.isOptimizerEnabled;\\r\\n    }\\r\\n\\r\\n    function getMemberKYCStatus(address member) external view returns (bool isKYCVerified_) {\\r\\n        isKYCVerified_ = reserve.members[member].isKYCVerified;\\r\\n    }\\r\\n\\r\\n    function getMemberFromId(uint256 memberId) external view returns (Member memory) {\\r\\n        return idToMember[memberId];\\r\\n    }\\r\\n\\r\\n    function getMemberFromAddress(address member) external view returns (Member memory) {\\r\\n        return reserve.members[member];\\r\\n    }\\r\\n\\r\\n    function getTokenAddress() external view returns (address) {\\r\\n        return address(daoToken);\\r\\n    }\\r\\n\\r\\n    function getContributionTokenAddress() external view returns (address contributionToken_) {\\r\\n        contributionToken_ = address(contributionToken);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Get the cash flow for the last 12 months. From the time is called\\r\\n     * @return cash_ the cash flow for the last 12 months\\r\\n     */\\r\\n    function getCashLast12Months() external view returns (uint256 cash_) {\\r\\n        (uint16 monthFromCall, uint8 dayFromCall) = _monthAndDayFromCall();\\r\\n        cash_ = _cashLast12Months(monthFromCall, dayFromCall);\\r\\n    }\\r\\n\\r\\n    function _createNewMember(\\r\\n        uint256 _benefitMultiplier,\\r\\n        uint256 _contributionAmount,\\r\\n        uint256 _membershipDuration,\\r\\n        uint256 _wakalaAmount\\r\\n    ) internal {\\r\\n        ++memberIdCounter;\\r\\n        uint256 currentTimestamp = block.timestamp;\\r\\n        uint256 userMembershipDuration;\\r\\n\\r\\n        if (allowCustomDuration) {\\r\\n            userMembershipDuration = _membershipDuration;\\r\\n        } else {\\r\\n            userMembershipDuration = DEFAULT_MEMBERSHIP_DURATION;\\r\\n        }\\r\\n\\r\\n        Member memory newMember = Member({\\r\\n            memberId: memberIdCounter,\\r\\n            benefitMultiplier: _benefitMultiplier,\\r\\n            membershipDuration: userMembershipDuration,\\r\\n            membershipStartTime: currentTimestamp,\\r\\n            contribution: _contributionAmount,\\r\\n            totalWakalaFee: _wakalaAmount,\\r\\n            wallet: msg.sender,\\r\\n            memberState: MemberState.Active,\\r\\n            surplus: 0, // Todo\\r\\n            isKYCVerified: false\\r\\n        });\\r\\n\\r\\n        // Add the member to the corresponding mappings\\r\\n        reserve.members[msg.sender] = newMember;\\r\\n        idToMember[memberIdCounter] = newMember;\\r\\n    }\\r\\n\\r\\n    function _updateProFormas(uint256 _contributionAmount) internal {\\r\\n        // Scope to avoid stack too deep error. This scope update both pro formas\\r\\n        uint256 updatedProFormaFundReserve = ReserveMathLib._updateProFormaFundReserve(\\r\\n            reserve.proFormaFundReserve,\\r\\n            _contributionAmount,\\r\\n            reserve.dynamicReserveRatio\\r\\n        );\\r\\n\\r\\n        uint256 updatedProFormaClaimReserve = ReserveMathLib._updateProFormaClaimReserve(\\r\\n            reserve.proFormaClaimReserve,\\r\\n            _contributionAmount,\\r\\n            reserve.wakalaFee,\\r\\n            reserve.initialReserveRatio\\r\\n        );\\r\\n\\r\\n        reserve.proFormaFundReserve = updatedProFormaFundReserve;\\r\\n        reserve.proFormaClaimReserve = updatedProFormaClaimReserve;\\r\\n    }\\r\\n\\r\\n    function _updateReserves(uint256 _contributionAmount, uint256 _depositAmount) internal {\\r\\n        uint256 toFundReserve = (_depositAmount * reserve.dynamicReserveRatio) / 100;\\r\\n        uint256 toClaimReserve = _depositAmount - toFundReserve;\\r\\n\\r\\n        reserve.totalFundReserve += toFundReserve;\\r\\n        reserve.totalContributions += _contributionAmount;\\r\\n        reserve.totalClaimReserve += toClaimReserve;\\r\\n    }\\r\\n\\r\\n    function _updateCashMappings(uint256 _depositAmount) internal {\\r\\n        uint256 currentTimestamp = block.timestamp;\\r\\n\\r\\n        if (dayDepositTimestamp == 0 && monthDepositTimestamp == 0) {\\r\\n            // If the depositTimestamp is 0 it means it is the first deposit\\r\\n            // Set the initial values for future calculations and reference\\r\\n            dayDepositTimestamp = currentTimestamp;\\r\\n            monthDepositTimestamp = currentTimestamp;\\r\\n            monthToCashFlow[monthReference] = _depositAmount;\\r\\n            dayToCashFlow[monthReference][dayReference] = _depositAmount;\\r\\n        } else {\\r\\n            // Check how many days and months have passed since the last deposit\\r\\n            uint256 daysPassed = ReserveMathLib._calculateDaysPassed(\\r\\n                currentTimestamp,\\r\\n                dayDepositTimestamp\\r\\n            );\\r\\n            uint256 monthsPassed = ReserveMathLib._calculateMonthsPassed(\\r\\n                currentTimestamp,\\r\\n                monthDepositTimestamp\\r\\n            );\\r\\n\\r\\n            if (monthsPassed == 0) {\\r\\n                // If no months have passed, update the mapping for the current month\\r\\n                monthToCashFlow[monthReference] += _depositAmount;\\r\\n                if (daysPassed == 0) {\\r\\n                    // If no days have passed, update the mapping for the current day\\r\\n                    dayToCashFlow[monthReference][dayReference] += _depositAmount;\\r\\n                } else {\\r\\n                    // If it is a new day, update the day deposit timestamp and the new day reference\\r\\n                    dayDepositTimestamp += daysPassed * DAY;\\r\\n                    dayReference += uint8(daysPassed);\\r\\n\\r\\n                    // Update the mapping for the new day\\r\\n                    dayToCashFlow[monthReference][dayReference] = _depositAmount;\\r\\n                }\\r\\n            } else {\\r\\n                // If it is a new month, update the month deposit timestamp and the day deposit timestamp\\r\\n                // both should be the same as it is a new month\\r\\n                monthDepositTimestamp += monthsPassed * MONTH;\\r\\n                dayDepositTimestamp = monthDepositTimestamp;\\r\\n                // Update the month reference to the corresponding month\\r\\n                monthReference += uint16(monthsPassed);\\r\\n                // Calculate the day reference for the new month, we need to recalculate the days passed\\r\\n                // with the new day deposit timestamp\\r\\n                daysPassed = ReserveMathLib._calculateDaysPassed(\\r\\n                    currentTimestamp,\\r\\n                    dayDepositTimestamp\\r\\n                );\\r\\n                // The new day reference is the days passed + initial day. Initial day refers\\r\\n                // to the first day of the month\\r\\n                uint8 initialDay = 1;\\r\\n                dayReference = uint8(daysPassed) + initialDay;\\r\\n\\r\\n                // Update the mappings for the new month and day\\r\\n                monthToCashFlow[monthReference] = _depositAmount;\\r\\n                dayToCashFlow[monthReference][dayReference] = _depositAmount;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _cashLast12Months(\\r\\n        uint16 _currentMonth,\\r\\n        uint8 _currentDay\\r\\n    ) internal view returns (uint256 cashLast12Months_) {\\r\\n        uint256 cash = 0;\\r\\n\\r\\n        // Then make the iterations, according the month and day this function is called\\r\\n        if (_currentMonth < 13) {\\r\\n            // Less than a complete year, iterate through every month passed\\r\\n            // Return everything stored in the mappings until now\\r\\n            for (uint8 i = 1; i <= _currentMonth; ) {\\r\\n                cash += monthToCashFlow[i];\\r\\n\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            // More than a complete year has passed, iterate the last 11 completed months\\r\\n            // This happens since month 13\\r\\n            uint16 monthBackCounter;\\r\\n            uint16 monthsInYear = 12;\\r\\n\\r\\n            for (uint8 i; i < monthsInYear; ) {\\r\\n                monthBackCounter = _currentMonth - i;\\r\\n                cash += monthToCashFlow[monthBackCounter];\\r\\n\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // Iterate an extra month to complete the days that are left from the current month\\r\\n            uint16 extraMonthToCheck = _currentMonth - monthsInYear;\\r\\n            uint8 dayBackCounter = 30;\\r\\n            uint8 extraDaysToCheck = dayBackCounter - _currentDay;\\r\\n\\r\\n            for (uint8 i; i < extraDaysToCheck; ) {\\r\\n                cash += dayToCashFlow[extraMonthToCheck][dayBackCounter];\\r\\n\\r\\n                unchecked {\\r\\n                    ++i;\\r\\n                    --dayBackCounter;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        cashLast12Months_ = cash;\\r\\n    }\\r\\n\\r\\n    function _monthAndDayFromCall()\\r\\n        internal\\r\\n        view\\r\\n        returns (uint16 currentMonth_, uint8 currentDay_)\\r\\n    {\\r\\n        uint256 currentTimestamp = block.timestamp;\\r\\n        uint256 lastDayDepositTimestamp = dayDepositTimestamp;\\r\\n        uint256 lastMonthDepositTimestamp = monthDepositTimestamp;\\r\\n\\r\\n        // Calculate how many days and months have passed since the last deposit and the current timestamp\\r\\n        uint256 daysPassed = ReserveMathLib._calculateDaysPassed(\\r\\n            currentTimestamp,\\r\\n            lastDayDepositTimestamp\\r\\n        );\\r\\n        uint256 monthsPassed = ReserveMathLib._calculateMonthsPassed(\\r\\n            currentTimestamp,\\r\\n            lastMonthDepositTimestamp\\r\\n        );\\r\\n\\r\\n        if (monthsPassed == 0) {\\r\\n            // If  no months have passed, current month is the reference\\r\\n            currentMonth_ = monthReference;\\r\\n            if (daysPassed == 0) {\\r\\n                // If no days have passed, current day is the reference\\r\\n                currentDay_ = dayReference;\\r\\n            } else {\\r\\n                // If you are in a new day, calculate the days passed\\r\\n                currentDay_ = uint8(daysPassed) + dayReference;\\r\\n            }\\r\\n        } else {\\r\\n            // If you are in a new month, calculate the months passed\\r\\n            currentMonth_ = uint16(monthsPassed) + monthReference;\\r\\n            // Calculate the timestamp when this new month started\\r\\n            uint256 timestampThisMonthStarted = lastMonthDepositTimestamp + (monthsPassed * MONTH);\\r\\n            // And calculate the days passed in this new month using the new month timestamp\\r\\n            daysPassed = ReserveMathLib._calculateDaysPassed(\\r\\n                currentTimestamp,\\r\\n                timestampThisMonthStarted\\r\\n            );\\r\\n            // The current day is the days passed in this new month\\r\\n            uint8 initialDay = 1;\\r\\n            currentDay_ = uint8(daysPassed) + initialDay;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _updateDRR(uint256 _cash) internal {\\r\\n        uint256 updatedDynamicReserveRatio = ReserveMathLib\\r\\n            ._calculateDynamicReserveRatioReserveShortfallMethod(\\r\\n                reserve.dynamicReserveRatio,\\r\\n                reserve.proFormaFundReserve,\\r\\n                reserve.totalFundReserve,\\r\\n                _cash\\r\\n            );\\r\\n\\r\\n        reserve.dynamicReserveRatio = updatedDynamicReserveRatio;\\r\\n    }\\r\\n\\r\\n    function _updateBMA(uint256 _cash) internal {\\r\\n        uint256 bmaInflowAssumption = ReserveMathLib._calculateBmaInflowAssumption(\\r\\n            _cash,\\r\\n            reserve.wakalaFee,\\r\\n            reserve.initialReserveRatio\\r\\n        );\\r\\n\\r\\n        uint256 updatedBMA = ReserveMathLib._calculateBmaCashFlowMethod(\\r\\n            reserve.totalClaimReserve,\\r\\n            reserve.totalFundReserve,\\r\\n            reserve.bmaFundReserveShare,\\r\\n            reserve.proFormaClaimReserve,\\r\\n            bmaInflowAssumption\\r\\n        );\\r\\n\\r\\n        reserve.benefitMultiplierAdjuster = updatedBMA;\\r\\n    }\\r\\n\\r\\n    function _transferAmounts(\\r\\n        uint256 _contributionAmount,\\r\\n        uint256 _depositAmount,\\r\\n        uint256 _wakalaAmount\\r\\n    ) internal {\\r\\n        // Scope to avoid stack too deep error. This scope include the external calls.\\r\\n        // At the end following CEI pattern\\r\\n        bool success;\\r\\n\\r\\n        // Mint needed DAO Tokens\\r\\n        uint256 mintAmount = _contributionAmount * DECIMALS_PRECISION; // 6 decimals to 18 decimals\\r\\n\\r\\n        success = daoToken.mint(msg.sender, mintAmount);\\r\\n        if (!success) {\\r\\n            revert TakasurePool__MintFailed();\\r\\n        }\\r\\n\\r\\n        // Transfer the contribution to the pool\\r\\n        success = contributionToken.transferFrom(msg.sender, address(this), _depositAmount);\\r\\n        if (!success) {\\r\\n            revert TakasurePool__ContributionTransferFailed();\\r\\n        }\\r\\n\\r\\n        // Transfer the wakala fee to the DAO\\r\\n        success = contributionToken.transferFrom(msg.sender, wakalaClaimAddress, _wakalaAmount);\\r\\n        if (!success) {\\r\\n            revert TakasurePool__FeeTransferFailed();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    ///@dev required by the OZ UUPS module\\r\\n    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}\\r\\n}\\r\\n\",\"keccak256\":\"0x7528aabc0c6f9f475ee2463d53bafb8328d147246756597ac4047ff9e5d6e5dc\",\"license\":\"GPL-3.0\"},\"contracts/types/TakasureTypes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity 0.8.25;\\r\\n\\r\\nenum MemberState {\\r\\n    Inactive,\\r\\n    Active,\\r\\n    Defaulted,\\r\\n    Deceased\\r\\n}\\r\\n\\r\\nstruct Member {\\r\\n    uint256 memberId;\\r\\n    uint256 benefitMultiplier;\\r\\n    uint256 membershipDuration; // in years\\r\\n    uint256 membershipStartTime; // in seconds\\r\\n    uint256 contribution; // in stablecoin currency in Wei\\r\\n    uint256 totalWakalaFee; // in stablecoin currency in Wei\\r\\n    address wallet;\\r\\n    MemberState memberState;\\r\\n    uint256 surplus; //Ratio of Net Contribution to the total net Contributions collected from all participants.\\r\\n    bool isKYCVerified;\\r\\n}\\r\\n\\r\\nstruct Reserve {\\r\\n    mapping(address member => Member) members;\\r\\n    uint256 initialReserveRatio; // Default 40%\\r\\n    uint256 dynamicReserveRatio; // Default 40%\\r\\n    uint256 benefitMultiplierAdjuster; // Default 100%\\r\\n    uint256 totalContributions; // Default 0\\r\\n    uint256 totalClaimReserve; // Default 0\\r\\n    uint256 totalFundReserve; // Default 0\\r\\n    uint256 proFormaFundReserve; // Used to update the dynamic reserve ratio\\r\\n    uint256 proFormaClaimReserve;\\r\\n    uint256 lossRatio; // Default 0\\r\\n    uint8 wakalaFee; // Default 20%, max 100%\\r\\n    uint8 bmaFundReserveShare; // Default 70%\\r\\n    bool isOptimizerEnabled; // Default false\\r\\n}\\r\\n\",\"keccak256\":\"0x70b75ba286d00030e7ceaa7fa1acb4b9a6fceaf9a732785b80fb45925ebcdcd4\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a060405230608052348015610013575f80fd5b5061001c610021565b6100d3565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff16156100715760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b03908116146100d05780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b6080516122256100f95f395f81816115c9015281816115f2015261173601526122255ff3fe608060405260043610610160575f3560e01c806375da30d0116100cd578063ad3cb1cc11610087578063d8aace7c11610062578063d8aace7c146104be578063d8fef67d146104dd578063f2fde38b146104f6578063f8c8765e14610515575f80fd5b8063ad3cb1cc1461044d578063c3210bd21461048a578063c54959701461049f575f80fd5b806375da30d0146103605780638b284fcf146103755780638da5cb5b1461039457806391458517146103d0578063953e1e231461041a578063a01d036314610439575f80fd5b806350bbad641161011e57806350bbad641461023557806352d1902d146102545780635399a7f114610276578063639431e814610295578063646247111461032d578063715018a61461034c575f80fd5b806246e8d5146101645780630b0da2e81461019957806310fe9ae8146101ba57806322a1cdb5146101d75780632e688445146102035780634f1ef28614610222575b5f80fd5b34801561016f575f80fd5b505f546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101a4575f80fd5b506101b86101b3366004611dc3565b610534565b005b3480156101c5575f80fd5b506001546001600160a01b031661017c565b3480156101e2575f80fd5b506101f66101f1366004611dc3565b610587565b6040516101909190611e10565b34801561020e575f80fd5b506101b861021d366004611e9a565b610652565b6101b8610230366004611ed7565b6107a2565b348015610240575f80fd5b506101b861024f366004611f93565b6107c1565b34801561025f575f80fd5b506102686107ce565b604051908152602001610190565b348015610281575f80fd5b506101b8610290366004611fb7565b6107e9565b3480156102a0575f80fd5b50600354600454600554600654600754600854600954600a54600b54600c54604080519a8b5260208b0199909952978901969096526060880194909452608087019290925260a086015260c085015260e08401526101008381019190915260ff80831661012085015290820481166101408401526201000090910416151561016082015261018001610190565b348015610338575f80fd5b506101f6610347366004611f93565b610804565b348015610357575f80fd5b506101b8610898565b34801561036b575f80fd5b5061026860115481565b348015610380575f80fd5b506101b861038f366004611dc3565b6108ab565b34801561039f575f80fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031661017c565b3480156103db575f80fd5b5061040a6103ea366004611dc3565b6001600160a01b03165f9081526002602052604090206008015460ff1690565b6040519015158152602001610190565b348015610425575f80fd5b506101b8610434366004611dc3565b6108fd565b348015610444575f80fd5b506102686109f9565b348015610458575f80fd5b5061047d604051806040016040528060058152602001640352e302e360dc1b81525081565b6040516101909190611fd2565b348015610495575f80fd5b5061026860125481565b3480156104aa575f80fd5b506101b86104b9366004612007565b610a19565b3480156104c9575f80fd5b5060135461017c906001600160a01b031681565b3480156104e8575f80fd5b50600d5461040a9060ff1681565b348015610501575f80fd5b506101b8610510366004611dc3565b610a5c565b348015610520575f80fd5b506101b861052f366004612027565b610a9e565b61053c610ccf565b806001600160a01b03811661056457604051638f0dd18960e01b815260040160405180910390fd5b50601380546001600160a01b0319166001600160a01b0392909216919091179055565b61058f611d44565b6001600160a01b038281165f90815260026020818152604092839020835161014081018552815481526001820154928101929092529182015492810192909252600380820154606084015260048201546080840152600582015460a0840152600682015493841660c08401529192909160e0840191600160a01b900460ff169081111561061e5761061e611ddc565b600381111561062f5761062f611ddc565b81526007820154602082015260089091015460ff16151560409091015292915050565b6001335f90815260026020526040902060060154600160a01b900460ff16600381111561068157610681611ddc565b0361069f5760405163170817b560e11b815260040160405180910390fd5b6011548210156106c2576040516380bc259360e01b815260040160405180910390fd5b6127106106cf818461208c565b6106d991906120ab565b600c549092505f906064906106f19060ff16856120ab565b6106fb919061208c565b90505f61070882856120c2565b905061071685858585610d2a565b61071f84610f5b565b6107298482610f9b565b61073281611017565b6010545f9061074f9061ffff81169062010000900460ff16611271565b905061075a8161137e565b6107638161139c565b61076e8583856113e1565b604051859033907f4ccbd5b45aea10bc8c80cbf5663a5d08e09f0c0c596a7ccf31576f6edc77623b905f90a3505050505050565b6107aa6115be565b6107b382611662565b6107bd828261166a565b5050565b6107c9610ccf565b601155565b5f6107d761172b565b505f805160206121d083398151915290565b6107f1610ccf565b600d805460ff1916911515919091179055565b61080c611d44565b5f8281526014602090815260409182902082516101408101845281548152600182015492810192909252600281015492820192909252600380830154606083015260048301546080830152600583015460a083015260068301546001600160a01b03811660c084015291929160e0840191600160a01b90910460ff169081111561061e5761061e611ddc565b6108a0610ccf565b6108a95f611774565b565b6108b3610ccf565b806001600160a01b0381166108db57604051638f0dd18960e01b815260040160405180910390fd5b505f80546001600160a01b0319166001600160a01b0392909216919091179055565b610905610ccf565b6001600160a01b0381161580610951575060016001600160a01b0382165f90815260026020526040902060060154600160a01b900460ff16600381111561094e5761094e611ddc565b14155b1561096f576040516394d03fd160e01b815260040160405180910390fd5b6001600160a01b0381165f9081526002602052604090206008015460ff16156109ab576040516389ac5eed60e01b815260040160405180910390fd5b6001600160a01b0381165f81815260026020526040808220600801805460ff19166001179055517f66db5268d8f029e30f638bebdd132c868f4bafb5a7f69d8987b3d4c6be24d1e99190a250565b5f805f610a046117e4565b91509150610a128282611271565b9250505090565b610a21610ccf565b60648160ff161115610a465760405163c88d0c0160e01b815260040160405180910390fd5b600c805460ff191660ff92909216919091179055565b610a64610ccf565b6001600160a01b038116610a9257604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b610a9b81611774565b50565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff165f81158015610ae35750825b90505f8267ffffffffffffffff166001148015610aff5750303b155b905081158015610b0d575080155b15610b2b5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610b5557845460ff60401b1916600160401b1785555b886001600160a01b038116610b7d57604051638f0dd18960e01b815260040160405180910390fd5b886001600160a01b038116610ba557604051638f0dd18960e01b815260040160405180910390fd5b886001600160a01b038116610bcd57604051638f0dd18960e01b815260040160405180910390fd5b886001600160a01b038116610bf557604051638f0dd18960e01b815260040160405180910390fd5b610bfd6118a6565b610c068a6118ae565b50505f80546001600160a01b03199081166001600160a01b038e8116919091179092556001805482168d841617905560138054909116918b1691909117905550506010805462ffffff19166201000117905563017d7840601155602860038190556004556064600555600c805461ffff19166146141790558315610cc457845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050505050565b33610d017f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316146108a95760405163118cdaa760e01b8152336004820152602401610a89565b60125f8154610d38906120d5565b90915550600d5442905f9060ff1615610d52575082610d59565b5063096601805b5f6040518061014001604052806012548152602001888152602001838152602001848152602001878152602001858152602001336001600160a01b0316815260200160016003811115610dae57610dae611ddc565b81525f6020808301829052604092830182905233825260028082529183902084518155908401516001820155918301519082015560608201516003808301919091556080830151600483015560a0830151600583015560c08301516006830180546001600160a01b03929092166001600160a01b031983168117825560e086015195965086959391926001600160a81b0319161790600160a01b908490811115610e5a57610e5a611ddc565b02179055506101008201516007820155610120909101516008909101805491151560ff199092169190911790556012545f908152601460209081526040918290208351815590830151600182015590820151600282015560608201516003808301919091556080830151600483015560a0830151600583015560c08301516006830180546001600160a01b039092166001600160a01b031983168117825560e086015186959490936001600160a81b03191690911790600160a01b908490811115610f2757610f27611ddc565b02179055506101008201516007820155610120909101516008909101805460ff191691151591909117905550505050505050565b6009546004545f91610f6e9184906118bf565b600a54600c546003549293505f92610f8e9291869160ff909116906118e8565b60099290925550600a5550565b6004545f90606490610fad90846120ab565b610fb7919061208c565b90505f610fc482846120c2565b90508160026006015f828254610fda91906120ed565b9091555050600680548591905f90610ff39084906120ed565b9091555050600780548291905f9061100c9084906120ed565b909155505050505050565b600e5442901580156110295750600f54155b1561107557600e819055600f556010805461ffff9081165f90815260156020908152604080832086905593549283168252601681528382206201000090930460ff168252919091522055565b5f61108282600e54611936565b90505f61109183600f54611990565b9050805f0361119c5760105461ffff165f90815260156020526040812080548692906110be9084906120ed565b90915550505f8290036111105760105461ffff81165f9081526016602090815260408083206201000090940460ff16835292905290812080548692906111059084906120ed565b9091555061126b9050565b61111d62015180836120ab565b600e5f82825461112d91906120ed565b90915550506010805483919060029061115090849062010000900460ff16612100565b82546101009290920a60ff81810219909316918316021790915560105461ffff81165f90815260166020908152604080832062010000909404909416825291909152208590555061126b565b6111a962278d00826120ab565b600f5f8282546111b991906120ed565b9091555050600f54600e55601080548291905f906111dc90849061ffff16612119565b92506101000a81548161ffff021916908361ffff16021790555061120283600e54611936565b915060016112108184612100565b6010805460ff9283166201000090810262ff00001983168117845561ffff908116928116929092175f9081526015602090815260408083208c9055945493841682526016815284822092909304909416845290529020859055505b50505050565b5f80600d61ffff851610156112bd5760015b8461ffff168160ff16116112b75760ff81165f908152601560205260409020546112ad90836120ed565b9150600101611283565b50611377565b5f600c815b8161ffff168160ff161015611308576112de60ff821688612134565b61ffff81165f908152601560205260409020549093506112fe90856120ed565b93506001016112c2565b505f6113148288612134565b9050601e5f611323888361214f565b90505f5b8160ff168160ff1610156113705761ffff84165f90815260166020908152604080832060ff8716845290915290205461136090886120ed565b96505f1990920191600101611327565b5050505050505b9392505050565b6004546009546008545f92611395929091856119e8565b6004555050565b600c546003545f916113b391849160ff1690611a55565b600754600854600c54600a549394505f936113d9939291610100900460ff169086611a8d565b600555505050565b5f806113f264e8d4a51000866120ab565b6001546040516340c10f1960e01b8152336004820152602481018390529192506001600160a01b0316906340c10f19906044016020604051808303815f875af1158015611441573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114659190612168565b9150816114855760405163e16c322560e01b815260040160405180910390fd5b5f546040516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b03909116906323b872dd906064016020604051808303815f875af11580156114d8573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114fc9190612168565b91508161151c57604051630afdbbef60e11b815260040160405180910390fd5b5f546013546040516323b872dd60e01b81523360048201526001600160a01b039182166024820152604481018690529116906323b872dd906064016020604051808303815f875af1158015611573573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906115979190612168565b9150816115b757604051630bc6abbf60e11b815260040160405180910390fd5b5050505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061164457507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166116385f805160206121d0833981519152546001600160a01b031690565b6001600160a01b031614155b156108a95760405163703e46dd60e11b815260040160405180910390fd5b610a9b610ccf565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156116c4575060408051601f3d908101601f191682019092526116c191810190612183565b60015b6116ec57604051634c9c8ce360e01b81526001600160a01b0383166004820152602401610a89565b5f805160206121d0833981519152811461171c57604051632a87526960e21b815260048101829052602401610a89565b6117268383611b35565b505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108a95760405163703e46dd60e11b815260040160405180910390fd5b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b600e54600f545f918291429190836117fc8484611936565b90505f6118098584611990565b9050805f036118535760105461ffff1696505f8290036118365760105462010000900460ff16955061189d565b60105461184c9062010000900460ff1683612100565b955061189d565b6010546118649061ffff1682612119565b96505f61187462278d00836120ab565b61187e90856120ed565b905061188a8682611936565b925060016118988185612100565b975050505b50505050509091565b6108a9611b8a565b6118b6611b8a565b610a9b81611bd3565b5f60646118cc83856120ab565b6118d6919061208c565b6118e090856120ed565b949350505050565b5f6127106118f78360646120c2565b61190560ff861660646120c2565b61190f90876120ab565b61191991906120ab565b611923919061208c565b61192d90866120ed565b95945050505050565b5f8183101561195857604051630e75465760e31b815260040160405180910390fd5b5f61196383856120c2565b905062015180811015611978575f9150611988565b611985620151808261208c565b91505b505b92915050565b5f818310156119b257604051630e75465760e31b815260040160405180910390fd5b5f6119bd83856120c2565b905062278d00808210156119d3575f92506119e0565b6119dd818361208c565b92505b505092915050565b5f806119f4848661219a565b90505f81138015611a0457505f83115b15611a48575f83611a168360646120ab565b611a20919061208c565b611a2a90886120ed565b90506064811015611a3d57809250611a42565b606492505b50611a4c565b8591505b50949350505050565b5f612710611a648360646120c2565b611a6f8560646120c2565b611a7990876120ab565b611a8391906120ab565b6118e0919061208c565b5f806064611a9b86886120ab565b611aa5919061208c565b611aaf84896120ed565b611ab991906120ed565b90505f6064611ac887896120ab565b611ad2919061208c565b611add8660026120ab565b611ae791906120ed565b9050805f03611af95760649250611b2a565b5f81611b068460646120ab565b611b10919061208c565b90506064811115611b245760649350611b28565b8093505b505b505095945050505050565b611b3e82611bdb565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b905f90a2805115611b82576117268282611c3e565b6107bd611ca7565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff166108a957604051631afcd79f60e31b815260040160405180910390fd5b610a64611b8a565b806001600160a01b03163b5f03611c1057604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610a89565b5f805160206121d083398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b60605f80846001600160a01b031684604051611c5a91906121b9565b5f60405180830381855af49150503d805f8114611c92576040519150601f19603f3d011682016040523d82523d5f602084013e611c97565b606091505b50915091506119dd858383611cc6565b34156108a95760405163b398979f60e01b815260040160405180910390fd5b606082611cdb57611cd682611d1b565b611377565b8151158015611cf257506001600160a01b0384163b155b1561198857604051639996b31560e01b81526001600160a01b0385166004820152602401610a89565b805115611d2b5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6040518061014001604052805f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f6001600160a01b031681526020015f6003811115611d9557611d95611ddc565b81525f6020820181905260409091015290565b80356001600160a01b0381168114611dbe575f80fd5b919050565b5f60208284031215611dd3575f80fd5b61137782611da8565b634e487b7160e01b5f52602160045260245ffd5b60048110611e0c57634e487b7160e01b5f52602160045260245ffd5b9052565b5f61014082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c0830151611e6860c08401826001600160a01b03169052565b5060e0830151611e7b60e0840182611df0565b50610100838101519083015261012080840151801515828501526119e0565b5f805f60608486031215611eac575f80fd5b505081359360208301359350604090920135919050565b634e487b7160e01b5f52604160045260245ffd5b5f8060408385031215611ee8575f80fd5b611ef183611da8565b9150602083013567ffffffffffffffff80821115611f0d575f80fd5b818501915085601f830112611f20575f80fd5b813581811115611f3257611f32611ec3565b604051601f8201601f19908116603f01168101908382118183101715611f5a57611f5a611ec3565b81604052828152886020848701011115611f72575f80fd5b826020860160208301375f6020848301015280955050505050509250929050565b5f60208284031215611fa3575f80fd5b5035919050565b8015158114610a9b575f80fd5b5f60208284031215611fc7575f80fd5b813561137781611faa565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b5f60208284031215612017575f80fd5b813560ff81168114611377575f80fd5b5f805f806080858703121561203a575f80fd5b61204385611da8565b935061205160208601611da8565b925061205f60408601611da8565b915061206d60608601611da8565b905092959194509250565b634e487b7160e01b5f52601160045260245ffd5b5f826120a657634e487b7160e01b5f52601260045260245ffd5b500490565b808202811582820484141761198a5761198a612078565b8181038181111561198a5761198a612078565b5f600182016120e6576120e6612078565b5060010190565b8082018082111561198a5761198a612078565b60ff818116838216019081111561198a5761198a612078565b61ffff81811683821601908082111561198857611988612078565b61ffff82811682821603908082111561198857611988612078565b60ff828116828216039081111561198a5761198a612078565b5f60208284031215612178575f80fd5b815161137781611faa565b5f60208284031215612193575f80fd5b5051919050565b8181035f83128015838313168383128216171561198857611988612078565b5f82518060208501845e5f92019182525091905056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca2646970667358221220355369fe35c356b066f6cb7002f7fcf65ad66a1f19348ab6d3e2c58623c9f31664736f6c63430008190033",
  "deployedBytecode": "0x608060405260043610610160575f3560e01c806375da30d0116100cd578063ad3cb1cc11610087578063d8aace7c11610062578063d8aace7c146104be578063d8fef67d146104dd578063f2fde38b146104f6578063f8c8765e14610515575f80fd5b8063ad3cb1cc1461044d578063c3210bd21461048a578063c54959701461049f575f80fd5b806375da30d0146103605780638b284fcf146103755780638da5cb5b1461039457806391458517146103d0578063953e1e231461041a578063a01d036314610439575f80fd5b806350bbad641161011e57806350bbad641461023557806352d1902d146102545780635399a7f114610276578063639431e814610295578063646247111461032d578063715018a61461034c575f80fd5b806246e8d5146101645780630b0da2e81461019957806310fe9ae8146101ba57806322a1cdb5146101d75780632e688445146102035780634f1ef28614610222575b5f80fd5b34801561016f575f80fd5b505f546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101a4575f80fd5b506101b86101b3366004611dc3565b610534565b005b3480156101c5575f80fd5b506001546001600160a01b031661017c565b3480156101e2575f80fd5b506101f66101f1366004611dc3565b610587565b6040516101909190611e10565b34801561020e575f80fd5b506101b861021d366004611e9a565b610652565b6101b8610230366004611ed7565b6107a2565b348015610240575f80fd5b506101b861024f366004611f93565b6107c1565b34801561025f575f80fd5b506102686107ce565b604051908152602001610190565b348015610281575f80fd5b506101b8610290366004611fb7565b6107e9565b3480156102a0575f80fd5b50600354600454600554600654600754600854600954600a54600b54600c54604080519a8b5260208b0199909952978901969096526060880194909452608087019290925260a086015260c085015260e08401526101008381019190915260ff80831661012085015290820481166101408401526201000090910416151561016082015261018001610190565b348015610338575f80fd5b506101f6610347366004611f93565b610804565b348015610357575f80fd5b506101b8610898565b34801561036b575f80fd5b5061026860115481565b348015610380575f80fd5b506101b861038f366004611dc3565b6108ab565b34801561039f575f80fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031661017c565b3480156103db575f80fd5b5061040a6103ea366004611dc3565b6001600160a01b03165f9081526002602052604090206008015460ff1690565b6040519015158152602001610190565b348015610425575f80fd5b506101b8610434366004611dc3565b6108fd565b348015610444575f80fd5b506102686109f9565b348015610458575f80fd5b5061047d604051806040016040528060058152602001640352e302e360dc1b81525081565b6040516101909190611fd2565b348015610495575f80fd5b5061026860125481565b3480156104aa575f80fd5b506101b86104b9366004612007565b610a19565b3480156104c9575f80fd5b5060135461017c906001600160a01b031681565b3480156104e8575f80fd5b50600d5461040a9060ff1681565b348015610501575f80fd5b506101b8610510366004611dc3565b610a5c565b348015610520575f80fd5b506101b861052f366004612027565b610a9e565b61053c610ccf565b806001600160a01b03811661056457604051638f0dd18960e01b815260040160405180910390fd5b50601380546001600160a01b0319166001600160a01b0392909216919091179055565b61058f611d44565b6001600160a01b038281165f90815260026020818152604092839020835161014081018552815481526001820154928101929092529182015492810192909252600380820154606084015260048201546080840152600582015460a0840152600682015493841660c08401529192909160e0840191600160a01b900460ff169081111561061e5761061e611ddc565b600381111561062f5761062f611ddc565b81526007820154602082015260089091015460ff16151560409091015292915050565b6001335f90815260026020526040902060060154600160a01b900460ff16600381111561068157610681611ddc565b0361069f5760405163170817b560e11b815260040160405180910390fd5b6011548210156106c2576040516380bc259360e01b815260040160405180910390fd5b6127106106cf818461208c565b6106d991906120ab565b600c549092505f906064906106f19060ff16856120ab565b6106fb919061208c565b90505f61070882856120c2565b905061071685858585610d2a565b61071f84610f5b565b6107298482610f9b565b61073281611017565b6010545f9061074f9061ffff81169062010000900460ff16611271565b905061075a8161137e565b6107638161139c565b61076e8583856113e1565b604051859033907f4ccbd5b45aea10bc8c80cbf5663a5d08e09f0c0c596a7ccf31576f6edc77623b905f90a3505050505050565b6107aa6115be565b6107b382611662565b6107bd828261166a565b5050565b6107c9610ccf565b601155565b5f6107d761172b565b505f805160206121d083398151915290565b6107f1610ccf565b600d805460ff1916911515919091179055565b61080c611d44565b5f8281526014602090815260409182902082516101408101845281548152600182015492810192909252600281015492820192909252600380830154606083015260048301546080830152600583015460a083015260068301546001600160a01b03811660c084015291929160e0840191600160a01b90910460ff169081111561061e5761061e611ddc565b6108a0610ccf565b6108a95f611774565b565b6108b3610ccf565b806001600160a01b0381166108db57604051638f0dd18960e01b815260040160405180910390fd5b505f80546001600160a01b0319166001600160a01b0392909216919091179055565b610905610ccf565b6001600160a01b0381161580610951575060016001600160a01b0382165f90815260026020526040902060060154600160a01b900460ff16600381111561094e5761094e611ddc565b14155b1561096f576040516394d03fd160e01b815260040160405180910390fd5b6001600160a01b0381165f9081526002602052604090206008015460ff16156109ab576040516389ac5eed60e01b815260040160405180910390fd5b6001600160a01b0381165f81815260026020526040808220600801805460ff19166001179055517f66db5268d8f029e30f638bebdd132c868f4bafb5a7f69d8987b3d4c6be24d1e99190a250565b5f805f610a046117e4565b91509150610a128282611271565b9250505090565b610a21610ccf565b60648160ff161115610a465760405163c88d0c0160e01b815260040160405180910390fd5b600c805460ff191660ff92909216919091179055565b610a64610ccf565b6001600160a01b038116610a9257604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b610a9b81611774565b50565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff165f81158015610ae35750825b90505f8267ffffffffffffffff166001148015610aff5750303b155b905081158015610b0d575080155b15610b2b5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610b5557845460ff60401b1916600160401b1785555b886001600160a01b038116610b7d57604051638f0dd18960e01b815260040160405180910390fd5b886001600160a01b038116610ba557604051638f0dd18960e01b815260040160405180910390fd5b886001600160a01b038116610bcd57604051638f0dd18960e01b815260040160405180910390fd5b886001600160a01b038116610bf557604051638f0dd18960e01b815260040160405180910390fd5b610bfd6118a6565b610c068a6118ae565b50505f80546001600160a01b03199081166001600160a01b038e8116919091179092556001805482168d841617905560138054909116918b1691909117905550506010805462ffffff19166201000117905563017d7840601155602860038190556004556064600555600c805461ffff19166146141790558315610cc457845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050505050565b33610d017f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316146108a95760405163118cdaa760e01b8152336004820152602401610a89565b60125f8154610d38906120d5565b90915550600d5442905f9060ff1615610d52575082610d59565b5063096601805b5f6040518061014001604052806012548152602001888152602001838152602001848152602001878152602001858152602001336001600160a01b0316815260200160016003811115610dae57610dae611ddc565b81525f6020808301829052604092830182905233825260028082529183902084518155908401516001820155918301519082015560608201516003808301919091556080830151600483015560a0830151600583015560c08301516006830180546001600160a01b03929092166001600160a01b031983168117825560e086015195965086959391926001600160a81b0319161790600160a01b908490811115610e5a57610e5a611ddc565b02179055506101008201516007820155610120909101516008909101805491151560ff199092169190911790556012545f908152601460209081526040918290208351815590830151600182015590820151600282015560608201516003808301919091556080830151600483015560a0830151600583015560c08301516006830180546001600160a01b039092166001600160a01b031983168117825560e086015186959490936001600160a81b03191690911790600160a01b908490811115610f2757610f27611ddc565b02179055506101008201516007820155610120909101516008909101805460ff191691151591909117905550505050505050565b6009546004545f91610f6e9184906118bf565b600a54600c546003549293505f92610f8e9291869160ff909116906118e8565b60099290925550600a5550565b6004545f90606490610fad90846120ab565b610fb7919061208c565b90505f610fc482846120c2565b90508160026006015f828254610fda91906120ed565b9091555050600680548591905f90610ff39084906120ed565b9091555050600780548291905f9061100c9084906120ed565b909155505050505050565b600e5442901580156110295750600f54155b1561107557600e819055600f556010805461ffff9081165f90815260156020908152604080832086905593549283168252601681528382206201000090930460ff168252919091522055565b5f61108282600e54611936565b90505f61109183600f54611990565b9050805f0361119c5760105461ffff165f90815260156020526040812080548692906110be9084906120ed565b90915550505f8290036111105760105461ffff81165f9081526016602090815260408083206201000090940460ff16835292905290812080548692906111059084906120ed565b9091555061126b9050565b61111d62015180836120ab565b600e5f82825461112d91906120ed565b90915550506010805483919060029061115090849062010000900460ff16612100565b82546101009290920a60ff81810219909316918316021790915560105461ffff81165f90815260166020908152604080832062010000909404909416825291909152208590555061126b565b6111a962278d00826120ab565b600f5f8282546111b991906120ed565b9091555050600f54600e55601080548291905f906111dc90849061ffff16612119565b92506101000a81548161ffff021916908361ffff16021790555061120283600e54611936565b915060016112108184612100565b6010805460ff9283166201000090810262ff00001983168117845561ffff908116928116929092175f9081526015602090815260408083208c9055945493841682526016815284822092909304909416845290529020859055505b50505050565b5f80600d61ffff851610156112bd5760015b8461ffff168160ff16116112b75760ff81165f908152601560205260409020546112ad90836120ed565b9150600101611283565b50611377565b5f600c815b8161ffff168160ff161015611308576112de60ff821688612134565b61ffff81165f908152601560205260409020549093506112fe90856120ed565b93506001016112c2565b505f6113148288612134565b9050601e5f611323888361214f565b90505f5b8160ff168160ff1610156113705761ffff84165f90815260166020908152604080832060ff8716845290915290205461136090886120ed565b96505f1990920191600101611327565b5050505050505b9392505050565b6004546009546008545f92611395929091856119e8565b6004555050565b600c546003545f916113b391849160ff1690611a55565b600754600854600c54600a549394505f936113d9939291610100900460ff169086611a8d565b600555505050565b5f806113f264e8d4a51000866120ab565b6001546040516340c10f1960e01b8152336004820152602481018390529192506001600160a01b0316906340c10f19906044016020604051808303815f875af1158015611441573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114659190612168565b9150816114855760405163e16c322560e01b815260040160405180910390fd5b5f546040516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b03909116906323b872dd906064016020604051808303815f875af11580156114d8573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114fc9190612168565b91508161151c57604051630afdbbef60e11b815260040160405180910390fd5b5f546013546040516323b872dd60e01b81523360048201526001600160a01b039182166024820152604481018690529116906323b872dd906064016020604051808303815f875af1158015611573573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906115979190612168565b9150816115b757604051630bc6abbf60e11b815260040160405180910390fd5b5050505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061164457507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166116385f805160206121d0833981519152546001600160a01b031690565b6001600160a01b031614155b156108a95760405163703e46dd60e11b815260040160405180910390fd5b610a9b610ccf565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156116c4575060408051601f3d908101601f191682019092526116c191810190612183565b60015b6116ec57604051634c9c8ce360e01b81526001600160a01b0383166004820152602401610a89565b5f805160206121d0833981519152811461171c57604051632a87526960e21b815260048101829052602401610a89565b6117268383611b35565b505050565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108a95760405163703e46dd60e11b815260040160405180910390fd5b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b600e54600f545f918291429190836117fc8484611936565b90505f6118098584611990565b9050805f036118535760105461ffff1696505f8290036118365760105462010000900460ff16955061189d565b60105461184c9062010000900460ff1683612100565b955061189d565b6010546118649061ffff1682612119565b96505f61187462278d00836120ab565b61187e90856120ed565b905061188a8682611936565b925060016118988185612100565b975050505b50505050509091565b6108a9611b8a565b6118b6611b8a565b610a9b81611bd3565b5f60646118cc83856120ab565b6118d6919061208c565b6118e090856120ed565b949350505050565b5f6127106118f78360646120c2565b61190560ff861660646120c2565b61190f90876120ab565b61191991906120ab565b611923919061208c565b61192d90866120ed565b95945050505050565b5f8183101561195857604051630e75465760e31b815260040160405180910390fd5b5f61196383856120c2565b905062015180811015611978575f9150611988565b611985620151808261208c565b91505b505b92915050565b5f818310156119b257604051630e75465760e31b815260040160405180910390fd5b5f6119bd83856120c2565b905062278d00808210156119d3575f92506119e0565b6119dd818361208c565b92505b505092915050565b5f806119f4848661219a565b90505f81138015611a0457505f83115b15611a48575f83611a168360646120ab565b611a20919061208c565b611a2a90886120ed565b90506064811015611a3d57809250611a42565b606492505b50611a4c565b8591505b50949350505050565b5f612710611a648360646120c2565b611a6f8560646120c2565b611a7990876120ab565b611a8391906120ab565b6118e0919061208c565b5f806064611a9b86886120ab565b611aa5919061208c565b611aaf84896120ed565b611ab991906120ed565b90505f6064611ac887896120ab565b611ad2919061208c565b611add8660026120ab565b611ae791906120ed565b9050805f03611af95760649250611b2a565b5f81611b068460646120ab565b611b10919061208c565b90506064811115611b245760649350611b28565b8093505b505b505095945050505050565b611b3e82611bdb565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b905f90a2805115611b82576117268282611c3e565b6107bd611ca7565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff166108a957604051631afcd79f60e31b815260040160405180910390fd5b610a64611b8a565b806001600160a01b03163b5f03611c1057604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610a89565b5f805160206121d083398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b60605f80846001600160a01b031684604051611c5a91906121b9565b5f60405180830381855af49150503d805f8114611c92576040519150601f19603f3d011682016040523d82523d5f602084013e611c97565b606091505b50915091506119dd858383611cc6565b34156108a95760405163b398979f60e01b815260040160405180910390fd5b606082611cdb57611cd682611d1b565b611377565b8151158015611cf257506001600160a01b0384163b155b1561198857604051639996b31560e01b81526001600160a01b0385166004820152602401610a89565b805115611d2b5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6040518061014001604052805f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f6001600160a01b031681526020015f6003811115611d9557611d95611ddc565b81525f6020820181905260409091015290565b80356001600160a01b0381168114611dbe575f80fd5b919050565b5f60208284031215611dd3575f80fd5b61137782611da8565b634e487b7160e01b5f52602160045260245ffd5b60048110611e0c57634e487b7160e01b5f52602160045260245ffd5b9052565b5f61014082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c0830151611e6860c08401826001600160a01b03169052565b5060e0830151611e7b60e0840182611df0565b50610100838101519083015261012080840151801515828501526119e0565b5f805f60608486031215611eac575f80fd5b505081359360208301359350604090920135919050565b634e487b7160e01b5f52604160045260245ffd5b5f8060408385031215611ee8575f80fd5b611ef183611da8565b9150602083013567ffffffffffffffff80821115611f0d575f80fd5b818501915085601f830112611f20575f80fd5b813581811115611f3257611f32611ec3565b604051601f8201601f19908116603f01168101908382118183101715611f5a57611f5a611ec3565b81604052828152886020848701011115611f72575f80fd5b826020860160208301375f6020848301015280955050505050509250929050565b5f60208284031215611fa3575f80fd5b5035919050565b8015158114610a9b575f80fd5b5f60208284031215611fc7575f80fd5b813561137781611faa565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b5f60208284031215612017575f80fd5b813560ff81168114611377575f80fd5b5f805f806080858703121561203a575f80fd5b61204385611da8565b935061205160208601611da8565b925061205f60408601611da8565b915061206d60608601611da8565b905092959194509250565b634e487b7160e01b5f52601160045260245ffd5b5f826120a657634e487b7160e01b5f52601260045260245ffd5b500490565b808202811582820484141761198a5761198a612078565b8181038181111561198a5761198a612078565b5f600182016120e6576120e6612078565b5060010190565b8082018082111561198a5761198a612078565b60ff818116838216019081111561198a5761198a612078565b61ffff81811683821601908082111561198857611988612078565b61ffff82811682821603908082111561198857611988612078565b60ff828116828216039081111561198a5761198a612078565b5f60208284031215612178575f80fd5b815161137781611faa565b5f60208284031215612193575f80fd5b5051919050565b8181035f83128015838313168383128216171561198857611988612078565b5f82518060208501845e5f92019182525091905056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca2646970667358221220355369fe35c356b066f6cb7002f7fcf65ad66a1f19348ab6d3e2c58623c9f31664736f6c63430008190033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getCashLast12Months()": {
        "returns": {
          "cash_": "the cash flow for the last 12 months"
        }
      },
      "initialize(address,address,address,address)": {
        "details": "it reverts if any of the addresses is zero",
        "params": {
          "_contributionToken": "default USDC",
          "_daoOperator": "address allowed to manage the DAO",
          "_daoToken": "utility token for the DAO",
          "_wakalaClaimAddress": "address allowed to claim the wakala fee"
        }
      },
      "joinPool(uint256,uint256,uint256)": {
        "details": "it reverts if the contribution is less than the minimum threshold defaultes to `minimumThreshold`it reverts if the member is already activethe contribution amount will be round down so the last four decimals will be zero. This means      that the minimum contribution amount is 0.01 USDC",
        "params": {
          "benefitMultiplier": "fetched from off-chain oracle",
          "contributionAmount": "in six decimals",
          "membershipDuration": "default 5 years"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setKYCStatus(address)": {
        "details": "It reverts if the member is already KYCed"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getCashLast12Months()": {
        "notice": "Get the cash flow for the last 12 months. From the time is called"
      },
      "joinPool(uint256,uint256,uint256)": {
        "notice": "Allow new members to join the pool"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3774,
        "contract": "contracts/takasure/TakasurePool.sol:TakasurePool",
        "label": "contributionToken",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)3027"
      },
      {
        "astId": 3777,
        "contract": "contracts/takasure/TakasurePool.sol:TakasurePool",
        "label": "daoToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ITSToken)3409"
      },
      {
        "astId": 3780,
        "contract": "contracts/takasure/TakasurePool.sol:TakasurePool",
        "label": "reserve",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Reserve)5312_storage"
      },
      {
        "astId": 3800,
        "contract": "contracts/takasure/TakasurePool.sol:TakasurePool",
        "label": "allowCustomDuration",
        "offset": 0,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 3802,
        "contract": "contracts/takasure/TakasurePool.sol:TakasurePool",
        "label": "dayDepositTimestamp",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 3804,
        "contract": "contracts/takasure/TakasurePool.sol:TakasurePool",
        "label": "monthDepositTimestamp",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 3806,
        "contract": "contracts/takasure/TakasurePool.sol:TakasurePool",
        "label": "monthReference",
        "offset": 0,
        "slot": "16",
        "type": "t_uint16"
      },
      {
        "astId": 3808,
        "contract": "contracts/takasure/TakasurePool.sol:TakasurePool",
        "label": "dayReference",
        "offset": 2,
        "slot": "16",
        "type": "t_uint8"
      },
      {
        "astId": 3810,
        "contract": "contracts/takasure/TakasurePool.sol:TakasurePool",
        "label": "minimumThreshold",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 3812,
        "contract": "contracts/takasure/TakasurePool.sol:TakasurePool",
        "label": "memberIdCounter",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 3814,
        "contract": "contracts/takasure/TakasurePool.sol:TakasurePool",
        "label": "wakalaClaimAddress",
        "offset": 0,
        "slot": "19",
        "type": "t_address"
      },
      {
        "astId": 3819,
        "contract": "contracts/takasure/TakasurePool.sol:TakasurePool",
        "label": "idToMember",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_uint256,t_struct(Member)5282_storage)"
      },
      {
        "astId": 3823,
        "contract": "contracts/takasure/TakasurePool.sol:TakasurePool",
        "label": "monthToCashFlow",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint16,t_uint256)"
      },
      {
        "astId": 3829,
        "contract": "contracts/takasure/TakasurePool.sol:TakasurePool",
        "label": "dayToCashFlow",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_uint16,t_mapping(t_uint8,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)3027": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ITSToken)3409": {
        "encoding": "inplace",
        "label": "contract ITSToken",
        "numberOfBytes": "20"
      },
      "t_enum(MemberState)5260": {
        "encoding": "inplace",
        "label": "enum MemberState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Member)5282_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Member)",
        "numberOfBytes": "32",
        "value": "t_struct(Member)5282_storage"
      },
      "t_mapping(t_uint16,t_mapping(t_uint8,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(uint8 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint8,t_uint256)"
      },
      "t_mapping(t_uint16,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Member)5282_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Member)",
        "numberOfBytes": "32",
        "value": "t_struct(Member)5282_storage"
      },
      "t_mapping(t_uint8,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Member)5282_storage": {
        "encoding": "inplace",
        "label": "struct Member",
        "members": [
          {
            "astId": 5262,
            "contract": "contracts/takasure/TakasurePool.sol:TakasurePool",
            "label": "memberId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5264,
            "contract": "contracts/takasure/TakasurePool.sol:TakasurePool",
            "label": "benefitMultiplier",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5266,
            "contract": "contracts/takasure/TakasurePool.sol:TakasurePool",
            "label": "membershipDuration",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5268,
            "contract": "contracts/takasure/TakasurePool.sol:TakasurePool",
            "label": "membershipStartTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5270,
            "contract": "contracts/takasure/TakasurePool.sol:TakasurePool",
            "label": "contribution",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5272,
            "contract": "contracts/takasure/TakasurePool.sol:TakasurePool",
            "label": "totalWakalaFee",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5274,
            "contract": "contracts/takasure/TakasurePool.sol:TakasurePool",
            "label": "wallet",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 5277,
            "contract": "contracts/takasure/TakasurePool.sol:TakasurePool",
            "label": "memberState",
            "offset": 20,
            "slot": "6",
            "type": "t_enum(MemberState)5260"
          },
          {
            "astId": 5279,
            "contract": "contracts/takasure/TakasurePool.sol:TakasurePool",
            "label": "surplus",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 5281,
            "contract": "contracts/takasure/TakasurePool.sol:TakasurePool",
            "label": "isKYCVerified",
            "offset": 0,
            "slot": "8",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(Reserve)5312_storage": {
        "encoding": "inplace",
        "label": "struct Reserve",
        "members": [
          {
            "astId": 5287,
            "contract": "contracts/takasure/TakasurePool.sol:TakasurePool",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_struct(Member)5282_storage)"
          },
          {
            "astId": 5289,
            "contract": "contracts/takasure/TakasurePool.sol:TakasurePool",
            "label": "initialReserveRatio",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5291,
            "contract": "contracts/takasure/TakasurePool.sol:TakasurePool",
            "label": "dynamicReserveRatio",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5293,
            "contract": "contracts/takasure/TakasurePool.sol:TakasurePool",
            "label": "benefitMultiplierAdjuster",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5295,
            "contract": "contracts/takasure/TakasurePool.sol:TakasurePool",
            "label": "totalContributions",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5297,
            "contract": "contracts/takasure/TakasurePool.sol:TakasurePool",
            "label": "totalClaimReserve",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5299,
            "contract": "contracts/takasure/TakasurePool.sol:TakasurePool",
            "label": "totalFundReserve",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 5301,
            "contract": "contracts/takasure/TakasurePool.sol:TakasurePool",
            "label": "proFormaFundReserve",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 5303,
            "contract": "contracts/takasure/TakasurePool.sol:TakasurePool",
            "label": "proFormaClaimReserve",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 5305,
            "contract": "contracts/takasure/TakasurePool.sol:TakasurePool",
            "label": "lossRatio",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 5307,
            "contract": "contracts/takasure/TakasurePool.sol:TakasurePool",
            "label": "wakalaFee",
            "offset": 0,
            "slot": "10",
            "type": "t_uint8"
          },
          {
            "astId": 5309,
            "contract": "contracts/takasure/TakasurePool.sol:TakasurePool",
            "label": "bmaFundReserveShare",
            "offset": 1,
            "slot": "10",
            "type": "t_uint8"
          },
          {
            "astId": 5311,
            "contract": "contracts/takasure/TakasurePool.sol:TakasurePool",
            "label": "isOptimizerEnabled",
            "offset": 2,
            "slot": "10",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}